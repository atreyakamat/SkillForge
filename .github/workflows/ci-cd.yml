name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Testing Job
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: Install backend dependencies
      working-directory: ./server
      run: npm ci

    - name: Run ESLint on backend
      working-directory: ./server
      run: npm run lint

    - name: Run backend unit tests
      working-directory: ./server
      env:
        NODE_ENV: test
        JWT_SECRET: test-secret-key-for-ci
        MONGODB_URI: mongodb://localhost:27017/skillforge-test
      run: npm run test:unit

    - name: Run backend integration tests
      working-directory: ./server
      env:
        NODE_ENV: test
        JWT_SECRET: test-secret-key-for-ci
        MONGODB_URI: mongodb://localhost:27017/skillforge-test
      run: npm run test:integration

    - name: Generate backend coverage report
      working-directory: ./server
      env:
        NODE_ENV: test
        JWT_SECRET: test-secret-key-for-ci
        MONGODB_URI: mongodb://localhost:27017/skillforge-test
      run: npm run test:coverage

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend Testing Job
  frontend-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci

    - name: Run ESLint on frontend
      working-directory: ./client
      run: npm run lint

    - name: Run TypeScript type checking
      working-directory: ./client
      run: npm run type-check

    - name: Run frontend unit tests
      working-directory: ./client
      run: npm run test:unit

    - name: Generate frontend coverage report
      working-directory: ./client
      run: npm run test:coverage

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./client/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build frontend
      working-directory: ./client
      run: npm run build

  # E2E Testing Job
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd server && npm ci
        cd ../client && npm ci

    - name: Start backend server
      working-directory: ./server
      env:
        NODE_ENV: test
        JWT_SECRET: test-secret-key-for-ci
        MONGODB_URI: mongodb://localhost:27017/skillforge-e2e-test
        PORT: 5000
      run: npm start &

    - name: Wait for backend to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done'

    - name: Build and start frontend
      working-directory: ./client
      run: |
        npm run build
        npm run preview -- --port 3000 &

    - name: Wait for frontend to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run Cypress E2E tests
      working-directory: ./client
      env:
        CYPRESS_baseUrl: http://localhost:3000
        CYPRESS_apiUrl: http://localhost:5000/api
      run: npm run e2e:ci

    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: client/cypress/screenshots

    - name: Upload Cypress videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: client/cypress/videos

  # Security and Quality Checks
  security-audit:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Run security audit for backend
      working-directory: ./server
      run: npm audit --audit-level moderate

    - name: Run security audit for frontend
      working-directory: ./client
      run: npm audit --audit-level moderate

    - name: Run dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'SkillForge'
        path: '.'
        format: 'HTML'

    - name: Upload dependency check results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports

  # Performance Testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install dependencies
      working-directory: ./client
      run: npm ci

    - name: Build frontend
      working-directory: ./client
      run: npm run build

    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x

    - name: Run Lighthouse CI
      working-directory: ./client
      run: lhci autorun

  # Quality Gate Check
  quality-gate:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-audit]
    if: always()

    steps:
    - name: Check all job statuses
      run: |
        if [[ "${{ needs.backend-tests.result }}" != "success" ]]; then
          echo "Backend tests failed"
          exit 1
        fi
        if [[ "${{ needs.frontend-tests.result }}" != "success" ]]; then
          echo "Frontend tests failed"
          exit 1
        fi
        if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
          echo "E2E tests failed"
          exit 1
        fi
        if [[ "${{ needs.security-audit.result }}" != "success" ]]; then
          echo "Security audit failed"
          exit 1
        fi
        echo "All quality gates passed!"

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install and build
      run: |
        cd server && npm ci
        cd ../client && npm ci && npm run build

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        echo "Deployment completed successfully!"

    - name: Notify deployment success
      run: |
        echo "âœ… SkillForge deployed successfully to staging!"
        echo "ðŸ”— Frontend: https://skillforge-staging.example.com"
        echo "ðŸ”— API: https://api-skillforge-staging.example.com"